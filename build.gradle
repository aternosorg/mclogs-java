plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    alias(libs.plugins.jmh)
}

sourceCompatibility = 11
targetCompatibility = 11

group = 'gs.mclo'
version = project.findProperty("release") ?: "dev"
ext.isReleaseVersion = version != "dev" &&  !version.endsWith("SNAPSHOT")

repositories {
    mavenCentral()
}

dependencies {
    compileOnly(libs.jetbrains.annotations)
    testImplementation(libs.junit.api)
    testRuntimeOnly(libs.junit.engine)

    implementation(libs.gson)
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jmh {
    fork = 3
    iterations = 3
    warmupIterations = 0
}

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    from sourceSets.main.allSource
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'api'
            from components.java
            pom {
                name = 'mclo.gs API'
                description = 'The official java library for the mclo.gs API'
                url = 'https://github.com/aternosorg/mclogs-java'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/aternosorg/mclogs-java/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'julian'
                        name = 'Julian Vennen'
                        email = 'julian@aternos.org'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/aternosorg/mclogs-java.git'
                    developerConnection = 'scm:git:git@github.com:aternosorg/mclogs-java.git'
                    url = 'https://github.com/aternosorg/mclogs-java'
                }
            }
        }
    }

    repositories {
        maven {
            // https://central.sonatype.org/publish/publish-portal-ossrh-staging-api/
            def releaseRepo = "https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://central.sonatype.com/repository/maven-snapshots/"
            url = isReleaseVersion ? releaseRepo : snapshotRepo
            credentials {
                username = findProperty('OSSRH_USERNAME')
                password = findProperty('OSSRH_PASSWORD')
            }
        }
    }
}

signing {
    def signingKey = findProperty("SIGNING_KEY").toString()
    def signingPassword = findProperty("SIGNING_PASSPHRASE").toString()
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

tasks.withType(Sign).configureEach {
    onlyIf { isReleaseVersion }
}
